#ifndef _UAPI_LINUX_NLWIFI_H
#define _UAPI_LINUX_NLWIFI_H

#include <linux/types.h>
	
enum {
	NLWIFI_CMD_UNSPEC,

	NLWIFI_CMD_GET_DEVICE,
	NLWIFI_CMD_SET_DEVICE,
	NLWIFI_CMD_GET_IFACE,
	NLWIFI_CMD_SET_IFACE,
	NLWIFI_CMD_GET_REGION,
	NLWIFI_CMD_TRIGGER_SCAN,
	NLWIFI_CMD_NEW_SCAN_RESULTS,
	NLWIFI_CMD_GET_STALIST,
	NLWIFI_CMD_GET_MESHLIST,
	NLWIFI_CMD_GET_APLIST,
	NLWIFI_CMD_GET_STA_ABILITYLIST,
	NLWIFI_CMD_GET_BEST_BSSID,
	NLWIFI_CMD_GET_UL_MAC,

	NLWIFI_CMD_SET_CHANNEL,
	NLWIFI_CMD_UPDATE_DEVICE,
	NLWIFI_CMD_UPDATE_IFACE,

	NLWIFI_CMD_SEND_EVENT,
	NLWIFI_CMD_SET_PMK,
	NLWIFI_CMD_SET_AUTH,
	NLWIFI_CMD_SET_WSC,
	NLWIFI_CMD_SET_DEAUTH,

	NLWIFI_CMD_SET_MESH_ENABLE,
	NLWIFI_CMD_SET_MESH_EVENT_ENABLE,
	NLWIFI_CMD_SET_MESH_DISASSOC_STA,
	NLWIFI_CMD_SEND_BTM_REQUEST,
	NLWIFI_CMD_SEND_NEIGH_RESPONSE,
	NLWIFI_CMD_SEND_QOS_NULL,
	NLWIFI_CMD_SEND_BCN_MEASREQ,

	__NLWIFI_CMD_MAX,
	NLWIFI_CMD_MAX = __NLWIFI_CMD_MAX - 1
};
	
enum {
	NLWIFI_ATTR_UNSPEC,
	NLWIFI_ATTR_IFNAME,
	NLWIFI_ATTR_HWMODE,
	NLWIFI_ATTR_HWMODES,
	NLWIFI_ATTR_IFTYPE,
	NLWIFI_ATTR_CHANNEL,
	NLWIFI_ATTR_CHANNEL_TYPE,
	NLWIFI_ATTR_CHANNEL_LIST,
	NLWIFI_ATTR_FREQ_OFFSET,
	NLWIFI_ATTR_TXPWR,
	NLWIFI_ATTR_RSSI,
	NLWIFI_ATTR_QUALITY,
	NLWIFI_ATTR_NOISE,
	NLWIFI_ATTR_STANUM,
	NLWIFI_ATTR_RTS_THRESHOLD,
	NLWIFI_ATTR_COUNTRY,
	NLWIFI_ATTR_MAC,
	NLWIFI_ATTR_BSSID,
	NLWIFI_ATTR_KEY,
	NLWIFI_ATTR_PPK,
	NLWIFI_ATTR_SSID,
	NLWIFI_ATTR_AUTH_TYPE,
	NLWIFI_ATTR_CIPHER_TYPE,
	NLWIFI_ATTR_HIDDEN_SSID,
	NLWIFI_ATTR_AP_ISOLATE,
	NLWIFI_ATTR_ACL_POLICY,
	NLWIFI_ATTR_ACL_MACLIST,
	NLWIFI_ATTR_ADD_MAC,
	NLWIFI_ATTR_DEL_MAC,
	NLWIFI_ATTR_DEAUTH_MAC,
	NLWIFI_ATTR_STA_INFO,
	NLWIFI_ATTR_MESH_ENTRY,
	NLWIFI_ATTR_AP_INFO,
	NLWIFI_ATTR_HOSTNAME,
	NLWIFI_ATTR_ACTION,
	NLWIFI_ATTR_DATA,
	NLWIFI_ATTR_VALUE,
	NLWIFI_ATTR_TRUE,

	NLWIFI_ATTR_VENDOR_ID,
	NLWIFI_ATTR_DEVICE_ID,
	NLWIFI_ATTR_DEVICE_VER,
	NLWIFI_ATTR_DEVICE_REV,

	NLWIFI_ATTR_FRAME,
	NLWIFI_ATTR_IFACE_RATE,
	NLWIFI_ATTR_STA_ABILITYLIST,
	NLWIFI_ATTR_BTM_REQUEST,
	NLWIFI_ATTR_NEIGHBOR_RESPONSE,
	NLWIFI_ATTR_BCN_REQ_DATA,

	__NLWIFI_ATTR_MAX,
	NLWIFI_ATTR_MAX = __NLWIFI_ATTR_MAX - 1
};

enum nlwifi_hwmode {
	NLWIFI_HWMODE_11B,
	NLWIFI_HWMODE_11G,
	NLWIFI_HWMODE_11A,
	NLWIFI_HWMODE_11BG,
	NLWIFI_HWMODE_11BGN,
	NLWIFI_HWMODE_11GN,
	NLWIFI_HWMODE_11N,
	NLWIFI_HWMODE_11AN,
	NLWIFI_HWMODE_11ANAC,
	NLWIFI_HWMODE_11NAC,
	NLWIFI_HWMODE_11AC,
	NLWIFI_HWMODE_11BGNAX,
	NLWIFI_HWMODE_11ACAX
};

enum nlwifi_chan_type {
	NLWIFI_CHAN_HT20,
	NLWIFI_CHAN_HT40MINUS,
	NLWIFI_CHAN_HT40PLUS,
	NLWIFI_CHAN_HT40,
	NLWIFI_CHAN_VHT80,
	NLWIFI_CHAN_VHT160,
	NLWIFI_CHAN_AUTO,
};

enum nlwifi_chan_width {
	NLWIFI_CHAN_20MHZ,
	NLWIFI_CHAN_40MHZ,
	NLWIFI_CHAN_80MHZ,
	NLWIFI_CHAN_160MHZ
};

enum nlwifi_auth {
	NLWIFI_AUTH_OPEN,
	NLWIFI_AUTH_WEPSHARED,
	NLWIFI_AUTH_WEPMIX,
	NLWIFI_AUTH_WPA,
	NLWIFI_AUTH_WPA2,
	NLWIFI_AUTH_WPAWPA2,
	NLWIFI_AUTH_PSK,
	NLWIFI_AUTH_PSK2,
	NLWIFI_AUTH_PSKPSK2,
	NLWIFI_AUTH_WPA3PSK,
	NLWIFI_AUTH_WPA2PSKWPA3PSK
};

enum nlwifi_cipher {
	NLWIFI_CIPHER_NONE,
	NLWIFI_CIPHER_WEP,
	NLWIFI_CIPHER_TKIP,
	NLWIFI_CIPHER_AES,
	NLWIFI_CIPHER_TKIPAES
};

enum
{
	NLWIFI_ACL_POLICY_OPEN		= 0,			/* open, don't check ACL's */
	NLWIFI_ACL_POLICY_ALLOW		= 1,			/* allow traffic from MAC */
	NLWIFI_ACL_POLICY_DENY		= 2				/* deny traffic from MAC */
};

/* same as iwinfo_opmode */
enum nlwifi_opmode {
	NLWIFI_OPMODE_UNKNOWN    = 0,
	NLWIFI_OPMODE_MASTER     = 1,
	NLWIFI_OPMODE_ADHOC      = 2,
	NLWIFI_OPMODE_CLIENT     = 3,
	NLWIFI_OPMODE_MONITOR    = 4,
	NLWIFI_OPMODE_AP_VLAN    = 5,
	NLWIFI_OPMODE_WDS        = 6,
	NLWIFI_OPMODE_MESHPOINT  = 7,
	NLWIFI_OPMODE_P2P_CLIENT = 8,
	NLWIFI_OPMODE_P2P_GO     = 9,
};

#define MAC_ADDR_LEN 				6
#define MAX_SSID_LEN				32

typedef struct
{
	u_int8_t		mac[MAC_ADDR_LEN];	 /*STA µÄMACµØÖ·*/
	u_int8_t		hwmode;
	u_int8_t		txbw;
	u_int8_t		rxbw;
	int8_t			signal;
	int8_t 			noise;
	int8_t			rssi[3];
	u_int8_t		pwr;
	u_int8_t		rxs;
	u_int8_t		txmcs;
	u_int8_t		rxmcs;
	u_int32_t		txrate;
	u_int32_t		rxrate;
	u_int32_t		inact;
	u_int32_t		assoctime;
	u_int32_t		txbytes;
	u_int32_t		rxbytes;
} sta_info_t;

typedef struct
{
	u_int8_t		bssid[MAC_ADDR_LEN];
	char	 		ssid[MAX_SSID_LEN + 1];
	int8_t			rssi;
	u_int8_t		bsstype;
	u_int8_t		channel;
	u_int8_t		chtype;
	u_int8_t		hwmode;
	u_int8_t		auth;
	u_int8_t		cipher;
} ap_info_t;

#endif /* _UAPI_LINUX_NLWIFI_H */
